
# =========================================
#              Glamerio Language
#           Syntax & Features
# =========================================

# -------------------------------
# BASICS
# -------------------------------
# File extension: .gl
# Statement end: ;
# Single-line comment: #
# Multi-line comment: /* ... */

# -------------------------------
# DATA TYPES
# -------------------------------
int, float, str, bool, map, var

# -------------------------------
# VARIABLE DECLARATION
# -------------------------------
int x = 5;
float y = 3.14;
str z = "Hello";
bool b = true;
var autoType = 42;
var emptyVar;

# -------------------------------
# MAP/DICTIONARY
# -------------------------------
map student = {"name": "Ali", "id": 123, "grade": 95};
print(student["name"]);
student["grade"] = 100;

# -------------------------------
# STRING FUNCTIONS
# -------------------------------
str s = "Glamerio Test";
s.toUpperCase();
s.toLowerCase();
s.substring(3);
s.substring(0, 7);
s.contains("Test");
s.replace("Test", "Language");

# -------------------------------
# LOGICAL OPERATORS
# -------------------------------
&&, ||, !, ==, !=, <, >, <=, >=

# -------------------------------
# CONDITIONALS
# -------------------------------
if (age > 18) {
    print("Adult");
} else {
    print("Child");
}
print(age > 18 ? "Adult" : "Child"); # Inline if

# -------------------------------
# LOOPS
# -------------------------------
for (int i = 0; i < 5; i = i + 1) {
    print(i);
}
tuple numbers = [1, 2, 3];
for (var n in numbers) {
    print(n);
}

# -------------------------------
# FUNCTIONS
# -------------------------------
def sum(int a, int b) {
    return a + b;
}
print(sum(3, 5));

def greet(str name = "World") {
    print("Hello, " + name);
}
greet();
greet("Ali");

# -------------------------------
# CLASSES & OOP
# -------------------------------
class Car {
    str brand;
    int year;
    def start() {
        print(brand + " is running");
    }
}
Car c = new Car();
c.brand = "BMW";
c.year = 2020;
c.start();

# -------------------------------
# TRY-CATCH
# -------------------------------
try {
    int x = 5 / 0;
} catch (e) {
    print("Error: " + e);
}

# -------------------------------
# OTHER
# -------------------------------
- Automatic type conversion
- User-friendly error messages
- Multiple/empty variable declaration
- Map functions (optional): keys(), values(), hasKey(), remove()

# For more examples, see test_cases.gl